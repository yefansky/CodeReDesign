## BEGIN_TCVB
## FILE:k:\lab\CodeReDesign-dummy\src\cvbManager.ts
## OPERATION:GLOBAL-REPLACE
## OLD_CONTENT
```
export async function doUploadCommand(cvbFilePath: string, userPrompt: string, outputChannel: vscode.OutputChannel){
    const workspaceFolders = vscode.workspace.workspaceFolders;
    if (!workspaceFolders) {
        vscode.window.showErrorMessage('No workspace folder found');
        return;
    }
    
    const workspacePath = workspaceFolders[0].uri.fsPath;
    const tmpDir = path.join(workspacePath, '.CodeReDesignWorkSpace');

    const filenameSummary = await generateFilenameFromRequest(userPrompt);
    const timestamp = generateTimestamp();
    let baseFileName = `${timestamp}_${filenameSummary}.cvb`;
    let fileName = baseFileName;
    let i = 1;
    while (fs.existsSync(path.join(tmpDir, fileName))) {
        fileName = `${timestamp}_${filenameSummary}_${i}.cvb`;
        i++;
    }

    const cvbContent = fs.readFileSync(cvbFilePath, 'utf-8');

    resetCurrentOperationController();

    let apiResponse = await queryCodeReDesign(cvbContent, userPrompt, outputChannel, getCurrentOperationController().signal);
    let processSuccess = true;
    do {
        try {
            if (apiResponse) {
                const tcvb = new TCVB(apiResponse);
                const oldCvb = new Cvb(cvbContent);
                const cvb = mergeCvb(oldCvb, tcvb);

                processSuccess = true;

                cvb.setMetaData("用户需求", userPrompt);
                const newCvbFilePath = path.join(tmpDir, fileName);
                fs.writeFileSync(newCvbFilePath, cvb.toString(), 'utf-8');
                vscode.window.showInformationMessage(`API response saved as CVB file: ${newCvbFilePath}`);
            }
        } catch (err : any){
            vscode.window.showInformationMessage(`API response have error ${err.message}, try fix ...`);
            apiResponse = await callDeepSeekFixApi(err.message, outputChannel, true, getCurrentOperationController().signal);
            processSuccess = false;
        }
    } while (!processSuccess);

    clearCurrentOperationController();
}
```
## NEW_CONTENT
```
export async function doUploadCommand(cvbFilePath: string, userPrompt: string, outputChannel: vscode.OutputChannel){
    const workspaceFolders = vscode.workspace.workspaceFolders;
    if (!workspaceFolders) {
        vscode.window.showErrorMessage('No workspace folder found');
        return;
    }
    
    const workspacePath = workspaceFolders[0].uri.fsPath;
    const tmpDir = path.join(workspacePath, '.CodeReDesignWorkSpace');

    const filenameSummary = await generateFilenameFromRequest(userPrompt);
    const timestamp = generateTimestamp();
    let baseFileName = `${timestamp}_${filenameSummary}.cvb`;
    let fileName = baseFileName;
    let i = 1;
    while (fs.existsSync(path.join(tmpDir, fileName))) {
        fileName = `${timestamp}_${filenameSummary}_${i}.cvb`;
        i++;
    }

    const cvbContent = fs.readFileSync(cvbFilePath, 'utf-8');

    resetCurrentOperationController();

    let apiResponse = await queryCodeReDesign(cvbContent, userPrompt, outputChannel, getCurrentOperationController().signal);
    let processSuccess = true;
    do {
        try {
            if (apiResponse) {
                const tcvb = new TCVB(apiResponse);
                const oldCvb = new Cvb(cvbContent);
                const cvb = mergeCvb(oldCvb, tcvb);

                processSuccess = true;

                cvb.setMetaData("用户需求", userPrompt);
                const newCvbFilePath = path.join(tmpDir, fileName);
                fs.writeFileSync(newCvbFilePath, cvb.toString(), 'utf-8');
                vscode.window.showInformationMessage(`API response saved as CVB file: ${newCvbFilePath}`);

                // 保存 TCVB 文件
                const tcvbFilePath = path.join(tmpDir, fileName.replace(/\.cvb$/, '.tcvb'));
                fs.writeFileSync(tcvbFilePath, apiResponse, 'utf-8');
                
                // 保存分析结果
                const analysisResult = await analyzeCode(cvbContent, userPrompt, outputChannel, getCurrentOperationController().signal);
                if (analysisResult) {
                    const mdFilePath = path.join(tmpDir, fileName.replace(/\.cvb$/, '.md'));
                    fs.writeFileSync(mdFilePath, analysisResult, 'utf-8');
                }
            }
        } catch (err : any){
            vscode.window.showInformationMessage(`API response have error ${err.message}, try fix ...`);
            apiResponse = await callDeepSeekFixApi(err.message, outputChannel, true, getCurrentOperationController().signal);
            processSuccess = false;
        }
    } while (!processSuccess);

    clearCurrentOperationController();
}
```
## END_TCVB