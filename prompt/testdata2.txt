```markdown
## BEGIN_TCVB
## FILE:k:\lab\CodeReDesign-dummy\src\extension.ts
## OPERATION:GLOBAL-REPLACE
## OLD_CONTENT
```typescript
let apiResponse = await queryCodeReDesign(cvbContent, userPrompt, outputChannel, getCurrentOperationController().signal);
let processSuccess = true;
do{
    try {
        if (apiResponse) {
            const tcvb = new TCVB(apiResponse);
            const oldCvb = new Cvb(cvbContent);
            const cvb = mergeCvb(oldCvb, tcvb);

            processSuccess = true;

            cvb.setMetaData("用户需求", userPrompt);
            const newCvbFilePath = path.join(tmpDir, fileName);
            fs.writeFileSync(newCvbFilePath, cvb.toString(), 'utf-8');
            vscode.window.showInformationMessage(`API response saved as CVB file: ${newCvbFilePath}`);
        }
    } catch (err : any){
        apiResponse = await callDeepSeekFixApi(err.message, outputChannel, true, getCurrentOperationController().signal);
        processSuccess = false;
    }
} while (!processSuccess);
```
## NEW_CONTENT
```typescript
let apiResponse = await queryCodeReDesign(cvbContent, userPrompt, outputChannel, getCurrentOperationController().signal);
let processSuccess = true;
do{
    try {
        if (apiResponse) {
            const tcvb = new TCVB(apiResponse);
            const oldCvb = new Cvb(cvbContent);
            const tcvbFilePath = path.join(tmpDir, `${fileName}.tcvb`);
            fs.writeFileSync(tcvbFilePath, tcvb.toString(), 'utf-8');

            const cvb = mergeCvb(oldCvb, tcvb);

            processSuccess = true;

            cvb.setMetaData("用户需求", userPrompt);
            const newCvbFilePath = path.join(tmpDir, fileName);
            fs.writeFileSync(newCvbFilePath, cvb.toString(), 'utf-8');
            vscode.window.showInformationMessage(`API response saved as CVB file: ${newCvbFilePath}`);
        }
    } catch (err : any){
        apiResponse = await callDeepSeekFixApi(err.message, outputChannel, true, getCurrentOperationController().signal);
        processSuccess = false;
    }
} while (!processSuccess);
```
## OPERATION:GLOBAL-REPLACE
## OLD_CONTENT
```typescript
const analysisResult = await analyzeCode(cvbContent, userRequest, outputChannel, getCurrentOperationController().signal);
if (analysisResult) {
    vscode.window.showInformationMessage('Analysis completed. Check the output channel for details.');
}

vscode.window.showInformationMessage('解析完毕');
```
## NEW_CONTENT
```typescript
const analysisResult = await analyzeCode(cvbContent, userRequest, outputChannel, getCurrentOperationController().signal);
if (analysisResult) {
    const analysisFilePath = path.join(tmpDir, `${fileName}.md`);
    fs.writeFileSync(analysisFilePath, analysisResult, 'utf-8');
    vscode.window.showInformationMessage(`Analysis result saved as file: ${analysisFilePath}`);
}

vscode.window.showInformationMessage('解析完毕');
```

## FILE:k:\lab\CodeReDesign-dummy\src\siderBar.ts
## OPERATION:EXACT-REPLACE
## OLD_CONTENT
```typescript
if (file.endsWith('.cvb')) {
    const filePath = path.join(targetFolder, file);
    cvbFiles.push(new CvbFile(file, vscode.Uri.file(filePath)));
}
```
## NEW_CONTENT
```typescript
if (file.endsWith('.cvb') || file.endsWith('.tcvb') || file.endsWith('.md')) {
    const filePath = path.join(targetFolder, file);
    cvbFiles.push(new CvbFile(file, vscode.Uri.file(filePath)));
}
```
## BEFORE_ANCHOR
```typescript
const files = fs.readdirSync(targetFolder);
files.forEach(file => {
```
## AFTER_ANCHOR
```typescript
// 新增排序逻辑
cvbFiles.sort((a, b) => 
    a.label.localeCompare(b.label, undefined, { sensitivity: 'base' })
);
```
## END_TCVB
```