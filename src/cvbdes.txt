通过  getFormatDescription 理解CVB格式的设计
你现在要以此为基础，设计一种类似的数据结构，TCVB，用于大模型修改CVB后差量回传数据用
因为回传完整的CVB输出太慢，有很多地方没有被修改，会浪费大量token
注意点：
不要基于行号diff，因为大模型对行号不敏感，所以不要做依赖行号的diff
而是可以基于替换匹配串，匹配到对应内容，
删除其实是一种把已有串替换成空串的操作
插入其实也可以理解是把前后一定行数的上下文当做匹配串，在中间插入一些内容作为替换内容
你还要设计一些措施，方便大模型精确表示匹配的范围，比如给出一个区间范围，以免有多个相似的地方被错误的替换掉。区间范围也不要基于行号，而是基于字符串匹配
你要设计好格式，方便解析处理，同时最好还是和CVB一样是markdown，方便人类查看

我需要你设计一个merge函数
输入一个作为修改基础的CVB，和一个大模型回传的差量TCVB，把他们合并成一个新的CVB
同时TCVB应该有类似CVB的结构化数据，方便接受string时先转成TCVB数据结构，校验有效性

基于以上讨论，你来重构代码，输出完整代码：
注意：getCvbFormatDescription 应该放入Cvb作为一个函数
你也应该给TCvb提供一个描述函数
而且 getCvbFormatDescription 是作为提示词给大模型，指导大模型输出TCvb的
所以一定要精确，要说明上下文锚点，各种操作的具体格式，大模型输出的数据才是精确可解析的
为了进一步节省输出，能否在同一个文件里的多个修改复用前面的FILE路径头

观察一下，CVB的parse会防止出现在代码块里的 ## FILE 被解析
大使TCVB好像没有这样的处理，有没有问题
且TCVB里的匹配表达式，可能也是代码，应该用 ``` ``` 的markdown格式包裹，以方便人类查看



    public static getFormatDescription(): string {
        return `
TCVB 格式规范：

## BEGIN_TCVB
[文件块1]
[文件块2]
...
## END_TCVB

文件块格式：
## FILE:<文件路径>
[操作1]
[操作2]
...

操作类型：
1. 单个替换操作（SINGLE-REPLACE）:
## OPERATION:SINGLE-REPLACE
## BEFORE_ANCHOR
[代码块:前锚点内容,用来划定范围，避免混淆]
## AFTER_ANCHOR
[代码块:后锚点内容,用来划定范围，避免混淆]
## OLD_CONTENT
[代码块:被替换内容]
## NEW_CONTENT
[代码块:新内容]

2.全局替换操作（GLOBAL-REPLACE）:
## OPERATION:GLOBAL-REPLACE
## OLD_CONTENT
[代码块:被替换内容]
## NEW_CONTENT
[代码块:新内容]

3. 插入操作（INSERT）:
## OPERATION:INSERT
## BEFORE_ANCHOR
[代码块:插入位置前的锚点内容]
## AFTER_ANCHOR
[代码块:插入位置后的锚点内容]
## INSERT_CONTENT
[代码块:插入内容]

4. 删除操作（DELETE）:
## OPERATION:DELETE
## BEFORE_ANCHOR
[代码块:被删内容前的锚点内容]
## AFTER_ANCHOR
[代码块:被删内容后的锚点内容]
## DELETE_CONTENT
[代码块:被删除内容]

注意：
1. 文件路径复用：同一文件下的多个操作共享 FILE 声明
2. 混合操作：允许在文件块内任意顺序组合操作类型
3. 锚点为连续的多行内容：使用至少3行唯一文本作为锚点，用来标定范围，防止混淆
4. 代码块用 markdown 格式包裹
`;
    }
}
请根据getFormatDescription里的描述，把TCVB的代码修正，要能正确的解析
注意replace有两种操作（全局和单个），分开解析

有一种情况是新写一个文件，这种情况下就是纯写新内容
帮我新加一种 CREATE 操作
后面直接跟正文就行了（##FILE开头和原来一样，只不过 ## OPERATION:CREATE 后面直接跟正文内容，可以结构简单一点）

别忘了更新 getFormatDescription